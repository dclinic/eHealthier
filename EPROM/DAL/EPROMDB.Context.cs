//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EPROMDBEntities : DbContext
    {
        public EPROMDBEntities()
            : base("name=EPROMDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ControlType> ControlTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<FlagGroup> FlagGroups { get; set; }
        public virtual DbSet<Indicator> Indicators { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<PatientCategory> PatientCategories { get; set; }
        public virtual DbSet<PatientIndicator> PatientIndicators { get; set; }
        public virtual DbSet<PatientProvider> PatientProviders { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientSuggestion> PatientSuggestions { get; set; }
        public virtual DbSet<PatientSurvey> PatientSurveys { get; set; }
        public virtual DbSet<PatientSurveyStatu> PatientSurveyStatus { get; set; }
        public virtual DbSet<Practice> Practices { get; set; }
        public virtual DbSet<PracticeRole> PracticeRoles { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<ProviderOrganization> ProviderOrganizations { get; set; }
        public virtual DbSet<ProviderPatientThirdPartyApp> ProviderPatientThirdPartyApps { get; set; }
        public virtual DbSet<ProviderPractice> ProviderPractices { get; set; }
        public virtual DbSet<ProviderPracticeRole> ProviderPracticeRoles { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<ProviderTerm> ProviderTerms { get; set; }
        public virtual DbSet<ProviderType> ProviderTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<SecretQuestion> SecretQuestions { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Survey> Surveys { get; set; }
        public virtual DbSet<SurveyCategory> SurveyCategories { get; set; }
        public virtual DbSet<SurveyType> SurveyTypes { get; set; }
        public virtual DbSet<SystemFlag> SystemFlags { get; set; }
        public virtual DbSet<Term> Terms { get; set; }
        public virtual DbSet<ThirdPartyApp> ThirdPartyApps { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UserProperty> UserProperties { get; set; }
        public virtual DbSet<UserSecretQuestion> UserSecretQuestions { get; set; }
        public virtual DbSet<UsersInRole> UsersInRoles { get; set; }
        public virtual DbSet<UserSurvey> UserSurveys { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<Pathway> Pathways { get; set; }
        public virtual DbSet<PatientSurvey_Pathway_PatientSurveyStatus> PatientSurvey_Pathway_PatientSurveyStatus { get; set; }
        public virtual DbSet<AvailableEprom> AvailableEproms { get; set; }
        public virtual DbSet<DefaultDay> DefaultDays { get; set; }
        public virtual DbSet<PatientSurveys_Temp> PatientSurveys_Temp { get; set; }
        public virtual DbSet<LogManagement> LogManagements { get; set; }
        public virtual DbSet<CINTScore> CINTScores { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        public virtual ObjectResult<usp_search_FlagGroupByFilter_Result> usp_search_FlagGroupByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_FlagGroupByFilter_Result>("usp_search_FlagGroupByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<usp_search_SystemFlagByFilter_Result> usp_search_SystemFlagByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_SystemFlagByFilter_Result>("usp_search_SystemFlagByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_search_SurveyCategoryByFilter_Result> usp_search_SurveyCategoryByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_SurveyCategoryByFilter_Result>("usp_search_SurveyCategoryByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<usp_search_SurveyByFilter_Result> usp_search_SurveyByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_SurveyByFilter_Result>("usp_search_SurveyByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<usp_search_PatientCategoryByFilter_Result> usp_search_PatientCategoryByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_PatientCategoryByFilter_Result>("usp_search_PatientCategoryByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<usp_search_IndicatorsByFilter_Result> usp_search_IndicatorsByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_IndicatorsByFilter_Result>("usp_search_IndicatorsByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual int usp_InsertUserData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertUserData");
        }
    
        public virtual ObjectResult<usp_search_ThirdPartyAppByFilter_Result> usp_search_ThirdPartyAppByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_ThirdPartyAppByFilter_Result>("usp_search_ThirdPartyAppByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<usp_search_PathwayByFilter_Result> usp_search_PathwayByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_PathwayByFilter_Result>("usp_search_PathwayByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_isCINTExist_Result> sp_isCINTExist(string userID, string organizationID, string practiceID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var organizationIDParameter = organizationID != null ?
                new ObjectParameter("OrganizationID", organizationID) :
                new ObjectParameter("OrganizationID", typeof(string));
    
            var practiceIDParameter = practiceID != null ?
                new ObjectParameter("PracticeID", practiceID) :
                new ObjectParameter("PracticeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_isCINTExist_Result>("sp_isCINTExist", userIDParameter, organizationIDParameter, practiceIDParameter);
        }
    
        public virtual ObjectResult<usp_search_OrganizationTypeByFilter_Result> usp_search_OrganizationTypeByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_OrganizationTypeByFilter_Result>("usp_search_OrganizationTypeByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    
        public virtual ObjectResult<usp_search_UserTypeByFilter_Result> usp_search_UserTypeByFilter(Nullable<int> startIndex, Nullable<int> endIndex, string searchString, Nullable<bool> isActive, ObjectParameter totalRecords)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var endIndexParameter = endIndex.HasValue ?
                new ObjectParameter("EndIndex", endIndex) :
                new ObjectParameter("EndIndex", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_UserTypeByFilter_Result>("usp_search_UserTypeByFilter", startIndexParameter, endIndexParameter, searchStringParameter, isActiveParameter, totalRecords);
        }
    }
}
